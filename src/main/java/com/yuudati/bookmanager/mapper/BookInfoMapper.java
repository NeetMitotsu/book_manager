package com.yuudati.bookmanager.mapper;

import com.yuudati.bookmanager.entity.BookInfo;
import com.yuudati.bookmanager.entity.BookInfoExample;
import org.apache.ibatis.annotations.*;

import java.util.List;

public interface BookInfoMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table book_info
     *
     * @mbg.generated
     */
    long countByExample(BookInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table book_info
     *
     * @mbg.generated
     */
    int deleteByExample(BookInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table book_info
     *
     * @mbg.generated
     */
    @Delete({
        "delete from book_info",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table book_info
     *
     * @mbg.generated
     */
    @Insert({
        "insert into book_info (id, exhibition, artist, ",
        "`name`, parody, `translate`, ",
        "`path`)",
        "values (#{id, jdbcType=VARCHAR}, #{exhibition,jdbcType=VARCHAR}, #{artist,jdbcType=VARCHAR}, ",
        "#{name,jdbcType=VARCHAR}, #{parody,jdbcType=VARCHAR}, #{translate,jdbcType=VARCHAR}, ",
        "#{path,jdbcType=VARCHAR})"
    })
    int insert(BookInfo record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table book_info
     *
     * @mbg.generated
     */
    int insertSelective(BookInfo record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table book_info
     *
     * @mbg.generated
     */
    List<BookInfo> selectByExample(BookInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table book_info
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "id, exhibition, artist, `name`, parody, `translate`, `path`",
        "from book_info",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    @ResultMap("com.yuudati.bookmanager.mapper.BookInfoMapper.BaseResultMap")
    BookInfo selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table book_info
     *
     * @mbg.generated
     */
    int updateByExampleSelective(@Param("record") BookInfo record, @Param("example") BookInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table book_info
     *
     * @mbg.generated
     */
    int updateByExample(@Param("record") BookInfo record, @Param("example") BookInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table book_info
     *
     * @mbg.generated
     */
    int updateByPrimaryKeySelective(BookInfo record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table book_info
     *
     * @mbg.generated
     */
    @Update({
        "update book_info",
        "set exhibition = #{exhibition,jdbcType=VARCHAR},",
          "artist = #{artist,jdbcType=VARCHAR},",
          "`name` = #{name,jdbcType=VARCHAR},",
          "parody = #{parody,jdbcType=VARCHAR},",
          "`translate` = #{translate,jdbcType=VARCHAR},",
          "`path` = #{path,jdbcType=VARCHAR}",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(BookInfo record);

    /**
     * 查询所有来源
     * @return
     */
    @Select({"SELECT DISTINCT exhibition FROM book_info ORDER BY exhibition"})
    List<String> selectAllExhibition();

    /**
     * 查询所有作者
     * @return
     */
    @Select({"SELECT DISTINCT artist FROM book_info"})
    List<String> selectAllArtist();

    /**
     * 查询所有题材
     * @return
     */
    @Select({"SELECT DISTINCT parody FROM book_info ORDER BY parody"})
    List<String> selectAllParody();
}